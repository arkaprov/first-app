Steps to download and install java

1. Search jdk download oracle 
2. https://www.oracle.com/in/java/technologies/downloads/#jdk24-windows
3. Choose x64 installer bin.exe.zip for windows 
The installer contains jre + jdk + development tools.
4. Now in Program files -> Java -> copy unzipped jdk file
5. Copy the bin directory path ->C:\Program Files\Java\jdk-24.0.2\bin
6. Open environment variables. There should be user variable and system variable.
7. You should select user variable ->path variable -> edit -> add one path -> paste our bin path.
8. now run java -version in command -> you should see the version now.


Steps to setup thw spring project and Tight Coupling

1. Open-> https://start.spring.io/
2. Project -> Maven  -> Springboot- 3.5.5 -> Project metadata - com.arka.core -> artifact- Spring core concepts -> Packaging - jar -> java - 24 -> (Skip dependencies as of now) -> generate -> download zip -> open that directory with IntelliJ
3. Now go to src/main/java


Tight Coupling 

// Animal.java
public class Animal {
    // Constructor that prints something
    public Animal() {
        System.out.println("Animal constructor called. Creating a generic animal.");
    }

    // play() method that prints something
    public void play() {
        System.out.println("The animal is playing around.");
    }
}




// Person.java
public class Person {
    // Tight coupling: Directly creating an instance of Animal using 'new'
    private Animal animal = new Animal();

    // Method to play with the animal
    public void playWithAnimal() {
        animal.play();  // Calling the play() method on the tightly coupled animal object
    }
}




// App.java (The main Spring Boot application class)
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class App {
    public static void main(String[] args) {
        // Manually creating Person object (not using Spring's dependency injection yet)
        Person p = new Person();
        // Calling the method to demonstrate the behavior
        p.playWithAnimal();

        // Starting the Spring Boot application (though in this basic example, it's not using Spring features yet)
        SpringApplication.run(App.class, args);
    }
}






















Loose Coupling

// Animal.java (now an interface for loose coupling)
public interface Animal {
    void play();  // Abstract method for playing
}


// Dog.java (implements Animal interface)
public class Dog implements Animal {
    // Constructor that prints something
    public Dog() {
        System.out.println("Dog constructor called. Creating a dog.");
    }

    // Implementation of play() method
    @Override
    public void play() {
        System.out.println("The dog is playing fetch.");
    }
}




// Cat.java (implements Animal interface)
public class Cat implements Animal {
    // Constructor that prints something
    public Cat() {
        System.out.println("Cat constructor called. Creating a cat.");
    }

    // Implementation of play() method
    @Override
    public void play() {
        System.out.println("The cat is playing with a yarn ball.");
    }
}





// Person.java (now uses loose coupling via interface and constructor injection)
public class Person {
    // Loose coupling: Depends on the Animal interface, not a concrete class
    private Animal animal;

    // Constructor injection: Animal is provided from outside, no 'new' here
    public Person(Animal animal) {
        this.animal = animal;
    }

    // Method to play with the animal
    public void playWithAnimal() {
        animal.play();  // Calls play() on whatever Animal implementation was injected
    }
}





// App.java (The main Spring Boot application class)
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class App {
    public static void main(String[] args) {
        // Loose coupling demo: Create a specific Animal implementation
        // You can easily swap Dog for Cat without changing Person.java
        Animal dog = new Dog();  // Or use: Animal cat = new Cat();
        
        // Inject the Animal into Person via constructor
        Person p = new Person(dog);  // Pass the animal here
        
        // Call the method to demonstrate
        p.playWithAnimal();

        // Starting the Spring Boot application (not using Spring DI in this basic demo)
        SpringApplication.run(App.class, args);
    }
}














Beans and Dependencies management using Spring

// Animal.java (interface remains the same)
public interface Animal {
    void play();  // Abstract method for playing
}



// Cat.java (optional extra bean, also managed by Spring if needed)
import org.springframework.stereotype.Component;

// @Component  // Uncomment if you want Cat as a bean; otherwise, Spring won't create it automatically
public class Cat implements Animal {
    public Cat() {
        System.out.println("Cat constructor called. Creating a cat.");
    }

    @Override
    public void play() {
        System.out.println("The cat is playing with a yarn ball.");
    }
}



// Person.java (now a Spring bean with autowired dependency)
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component  // Declares this as a Spring bean, managed by the container
public class Person {
    // Loose coupling: Depends on Animal interface
    @Autowired  // Tells Spring to automatically inject a matching bean (e.g., Dog) here
    private Animal animal;

    // No constructor needed for injection now; Spring handles it via field injection

    public void playWithAnimal() {
        animal.play();  // Uses the injected animal
    }
}



// App.java (Main Spring Boot application; now uses Spring to get beans)
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication  // Enables auto-configuration and component scanning
// If beans are in different packages, add: @ComponentScan(basePackages = {"com.example.package1", "com.example.package2"})
public class App {
    public static void main(String[] args) {
        // Start Spring app and get the IoC container (ApplicationContext)
        ApplicationContext context = SpringApplication.run(App.class, args);
        
        // Retrieve the Person bean from the container (no manual 'new')
        Person p = context.getBean(Person.class);
        
        // Use it
        p.playWithAnimal();
    }
}
