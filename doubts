provider "aws" {
  region = "us-east-1"  # Replace with your desired region
}

# Reference an existing security group
data "aws_security_group" "existing_sg" {
  name = "existing-security-group-name"  # Replace with the actual security group name
  # Alternatively, use ID:
  # id = "sg-1234567890abcdef0"
}

# Launch two EC2 instances
resource "aws_instance" "my_instance" {
  count         = 2
  ami           = "ami-0c55b159cbfafe1f0"  # Replace with a valid AMI for your region
  instance_type = "t2.micro"
  security_groups = [data.aws_security_group.existing_sg.name]

  tags = {
    Name = "instance-${count.index + 1}"
  }
}

output "instance_ids" {
  value = aws_instance.my_instance[*].id
}





Making an instance with a new security group through terraform

1. Make an instance and install terraform there and make a directory.
2. Make a tf file:

provider "aws" {
  region = "us-east-1"  # Replace with your desired region
}

# Create a new security group
resource "aws_security_group" "my_sg" {
  name        = "my-security-group"
  description = "Security group for EC2 instances"

  # Ingress rule for SSH
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow SSH from anywhere (restrict for production)
  }

  # Ingress rule for HTTP (example)
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Egress rule (allow all outbound traffic)
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "my-security-group"
  }
}

# Launch two EC2 instances
resource "aws_instance" "my_instance" {
  count         = 2
  ami           = "ami-0c55b159cbfafe1f0"  # Replace with a valid AMI for your region
  instance_type = "t2.micro"
  security_groups = [aws_security_group.my_sg.name]

  tags = {
    Name = "instance-${count.index + 1}"
  }
}

output "instance_ids" {
  value = aws_instance.my_instance[*].id
}






│ Error: Invalid character
│
│   on provider.tf line 2, in provider "aws":
│    2:   region = "us-east-1"  # Replace with your desired region
│
│ This character is not used within the language.
╵
╷
│ Error: Argument or block definition required
│
│   on provider.tf line 2, in provider "aws":
│    2:   region = "us-east-1"  # Replace with your desired region
│
│ An argument or block definition is required here.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 7, in resource "aws_security_group" "my_sg":
│    7:   name        = "my-security-group"
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 8, in resource "aws_security_group" "my_sg":
│    8:   description = "Security group for EC2 instances"
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 10, in resource "aws_security_group" "my_sg":
│   10:   # Ingress rule for SSH
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 11, in resource "aws_security_group" "my_sg":
│   11:   ingress {
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 12, in resource "aws_security_group" "my_sg":
│   12:     from_port   = 22
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 13, in resource "aws_security_group" "my_sg":
│   13:     to_port     = 22
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 14, in resource "aws_security_group" "my_sg":
│   14:     protocol    = "tcp"
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 15, in resource "aws_security_group" "my_sg":
│   15:     cidr_blocks = ["0.0.0.0/0"]  # Allow SSH from anywhere (restrict for production)
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 16, in resource "aws_security_group" "my_sg":
│   16:   }
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 18, in resource "aws_security_group" "my_sg":
│   18:   # Ingress rule for HTTP (example)
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 19, in resource "aws_security_group" "my_sg":
│   19:   ingress {
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 20, in resource "aws_security_group" "my_sg":
│   20:     from_port   = 80
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 21, in resource "aws_security_group" "my_sg":
│   21:     to_port     = 80
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 22, in resource "aws_security_group" "my_sg":
│   22:     protocol    = "tcp"
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 23, in resource "aws_security_group" "my_sg":
│   23:     cidr_blocks = ["0.0.0.0/0"]
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 24, in resource "aws_security_group" "my_sg":
│   24:   }
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 26, in resource "aws_security_group" "my_sg":
│   26:   # Egress rule (allow all outbound traffic)
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 27, in resource "aws_security_group" "my_sg":
│   27:   egress {
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 28, in resource "aws_security_group" "my_sg":
│   28:     from_port   = 0
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 29, in resource "aws_security_group" "my_sg":
│   29:     to_port     = 0
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 30, in resource "aws_security_group" "my_sg":
│   30:     protocol    = "-1"
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 31, in resource "aws_security_group" "my_sg":
│   31:     cidr_blocks = ["0.0.0.0/0"]
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 32, in resource "aws_security_group" "my_sg":
│   32:   }
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 34, in resource "aws_security_group" "my_sg":
│   34:   tags = {
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 35, in resource "aws_security_group" "my_sg":
│   35:     Name = "my-security-group"
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 36, in resource "aws_security_group" "my_sg":
│   36:   }
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 41, in resource "aws_instance" "my_instance":
│   41:   count         = 2
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 42, in resource "aws_instance" "my_instance":
│   42:   ami           = "ami-00ca32bbc84273381"  # Replace with a valid AMI for your region
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 43, in resource "aws_instance" "my_instance":
│   43:   instance_type = "t2.micro"
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 44, in resource "aws_instance" "my_instance":
│   44:   security_groups = [aws_security_group.my_sg.name]
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 46, in resource "aws_instance" "my_instance":
│   46:   tags = {
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 47, in resource "aws_instance" "my_instance":
│   47:     Name = "instance-${count.index + 1}"
│
│ This character is not used within the language.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 48, in resource "aws_instance" "my_instance":
│   48:   }
│
│ This character is not used within the language.
╵
╷
│ Error: Missing required argument
│
│   on provider.tf line 51, in output "instance_ids":
│   51: output "instance_ids" {
│
│ The argument "value" is required, but no definition was found.
╵
╷
│ Error: Invalid character
│
│   on provider.tf line 52, in output "instance_ids":
│   52:   value = aws_instance.my_instance[*].id
│
│ This character is not used within the language.

















provider "aws" {
  region = "us-east-1"  # Replace with your desired region
}

# Create a new security group
resource "aws_security_group" "my_sg" {
  name        = "my-security-group"
  description = "Security group for EC2 instances"

  # Ingress rule for SSH
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow SSH from anywhere (restrict for production)
  }

  # Ingress rule for HTTP (example)
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Egress rule (allow all outbound traffic)
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "my-security-group"
  }
}

# Launch two EC2 instances
resource "aws_instance" "my_instance" {
  count         = 2
  ami           = "ami-0e86e20dae9224db8"  # Valid AMI for us-east-1 (Amazon Linux 2, as of 2025)
  instance_type = "t2.micro"
  security_groups = [aws_security_group.my_sg.name]

  tags = {
    Name = "instance-${count.index + 1}"
  }
}

output "instance_ids" {
  value = aws_instance.my_instance[*].id
}









######

# data/eks.tf

# Data sources for availability zones
data "aws_availability_zones" "available" {
  state = "available"
}

# VPC for EKS
resource "aws_vpc" "eks_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "eks-vpc"
  }
}

# Subnets for EKS
resource "aws_subnet" "eks_subnet" {
  count                   = 2
  vpc_id                  = aws_vpc.eks_vpc.id
  cidr_block              = "10.0.${count.index}.0/24"
  availability_zone       = data.aws_availability_zones.available.names[count.index]
  map_public_ip_on_launch = true

  tags = {
    Name                        = "eks-subnet-${count.index + 1}"
    "kubernetes.io/cluster/eks" = "shared"
    "kubernetes.io/role/elb"    = 1
  }
}

# Internet Gateway
resource "aws_internet_gateway" "eks_igw" {
  vpc_id = aws_vpc.eks_vpc.id

  tags = {
    Name = "eks-igw"
  }
}

# Route Table
resource "aws_route_table" "eks_rt" {
  vpc_id = aws_vpc.eks_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.eks_igw.id
  }

  tags = {
    Name = "eks-rt"
  }
}

# Route Table Association
resource "aws_route_table_association" "eks_rta" {
  count          = 2
  subnet_id      = aws_subnet.eks_subnet[count.index].id
  route_table_id = aws_route_table.eks_rt.id
}

# Reference existing security group (assumes it's in the same directory)
data "aws_security_group" "my_sg" {
  name = "my-security-group"
}

# Add EKS-required ingress rule to existing security group
resource "aws_security_group_rule" "eks_node_communication" {
  security_group_id = data.aws_security_group.my_sg.id
  type              = "ingress"
  from_port         = 0
  to_port           = 0
  protocol          = "-1"
  self              = true  # Allow all traffic within the security group
}

# IAM Role for EKS Cluster
resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster_role.name
}

# IAM Role for EKS Node Group
resource "aws_iam_role" "eks_node_role" {
  name = "eks-node-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_node_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "ec2_container_registry" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks_node_role.name
}

# EKS Cluster
resource "aws_eks_cluster" "eks_cluster" {
  name     = "my-eks-cluster"
  role_arn = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    subnet_ids         = aws_subnet.eks_subnet[*].id
    security_group_ids = [data.aws_security_group.my_sg.id]
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_policy
  ]
}

# EKS Node Group
resource "aws_eks_node_group" "eks_node_group" {
  cluster_name    = aws_eks_cluster.eks_cluster.name
  node_group_name = "eks-node-group"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = aws_subnet.eks_subnet[*].id

  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }

  instance_types = ["t3.medium"]
  ami_type       = "AL2_x86_64"

  remote_access {
    ec2_ssh_key               = null
    source_security_group_ids = [data.aws_security_group.my_sg.id]
  }

  depends_on = [
    aws_eks_cluster.eks_cluster,
    aws_iam_role_policy_attachment.eks_node_policy,
    aws_iam_role_policy_attachment.eks_cni_policy,
    aws_iam_role_policy_attachment.ec2_container_registry
  ]
}

# Outputs
output "eks_cluster_endpoint" {
  value = aws_eks_cluster.eks_cluster.endpoint
}

output "eks_cluster_name" {
  value = aws_eks_cluster.eks_cluster.name
}









###########################

│ Error: creating EKS Cluster (my-eks-cluster): operation error EKS: CreateCluster, https response error StatusCode: 400, RequestID: ad9d2d39-94b4-42f3-98f9-624f04660d5b, UnsupportedAvailabilityZoneException: Cannot create cluster 'my-eks-cluster' because EKS does not support creating control plane instances in us-east-1-mci-1a, the targeted availability zone. Retry cluster creation using control plane subnets that span at least two of these availability zones: us-east-1a, us-east-1b, us-east-1c, us-east-1d, us-east-1f. Note, post cluster creation, you can run worker nodes in separate subnets/availability zones from control plane subnets/availability zones passed during cluster creation
│
│   with aws_eks_cluster.eks_cluster,
│   on provider2.tf line 134, in resource "aws_eks_cluster" "eks_cluster":
│  134: resource "aws_eks_cluster" "eks_cluster" {






####################

# data/eks.tf

# Remove the data source since we'll hardcode supported AZs
# data "aws_availability_zones" "available" {
#   state = "available"
# }

# VPC for EKS
resource "aws_vpc" "eks_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "eks-vpc"
  }
}

# Subnets for EKS with explicitly supported AZs
resource "aws_subnet" "eks_subnet" {
  count                   = 2
  vpc_id                  = aws_vpc.eks_vpc.id
  cidr_block              = "10.0.${count.index}.0/24"
  availability_zone       = element(["us-east-1a", "us-east-1b"], count.index)  # Use supported AZs
  map_public_ip_on_launch = true

  tags = {
    Name                        = "eks-subnet-${count.index + 1}"
    "kubernetes.io/cluster/eks" = "shared"
    "kubernetes.io/role/elb"    = 1
  }
}

# Internet Gateway
resource "aws_internet_gateway" "eks_igw" {
  vpc_id = aws_vpc.eks_vpc.id

  tags = {
    Name = "eks-igw"
  }
}

# Route Table
resource "aws_route_table" "eks_rt" {
  vpc_id = aws_vpc.eks_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.eks_igw.id
  }

  tags = {
    Name = "eks-rt"
  }
}

# Route Table Association
resource "aws_route_table_association" "eks_rta" {
  count          = 2
  subnet_id      = aws_subnet.eks_subnet[count.index].id
  route_table_id = aws_route_table.eks_rt.id
}

# Reference existing security group
data "aws_security_group" "my_sg" {
  name = "my-security-group"
}

# Add EKS-required ingress rule
resource "aws_security_group_rule" "eks_node_communication" {
  security_group_id = data.aws_security_group.my_sg.id
  type              = "ingress"
  from_port         = 0
  to_port           = 0
  protocol          = "-1"
  self              = true
}

# IAM Role for EKS Cluster
resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster_role.name
}

# IAM Role for EKS Node Group
resource "aws_iam_role" "eks_node_role" {
  name = "eks-node-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_node_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "ec2_container_registry" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks_node_role.name
}

# EKS Cluster
resource "aws_eks_cluster" "eks_cluster" {
  name     = "my-eks-cluster"
  role_arn = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    subnet_ids         = aws_subnet.eks_subnet[*].id
    security_group_ids = [data.aws_security_group.my_sg.id]
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_policy
  ]
}

# EKS Node Group
resource "aws_eks_node_group" "eks_node_group" {
  cluster_name    = aws_eks_cluster.eks_cluster.name
  node_group_name = "eks-node-group"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = aws_subnet.eks_subnet[*].id

  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }

  instance_types = ["t3.medium"]
  ami_type       = "AL2_x86_64"

  remote_access {
    ec2_ssh_key               = null
    source_security_group_ids = [data.aws_security_group.my_sg.id]
  }

  depends_on = [
    aws_eks_cluster.eks_cluster,
    aws_iam_role_policy_attachment.eks_node_policy,
    aws_iam_role_policy_attachment.eks_cni_policy,
    aws_iam_role_policy_attachment.ec2_container_registry
  ]
}

# Outputs
output "eks_cluster_endpoint" {
  value = aws_eks_cluster.eks_cluster.endpoint
}

output "eks_cluster_name" {
  value = aws_eks_cluster.eks_cluster.name
}